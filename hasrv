#!/bin/ksh -p
# Author: FJO
# hasrv
# automatic fallback and load balance to alive server
#

PATH=/bin:/sbin:/usr/bin:/usr/sbin

function usage
{
    cat - <<-'EOF'
	usage: hasrv <host> <port> <backup1> <backup2> ...
	       hasrv -auto <port> <backup1> <backup2> ...

	returns <host> if can connect to <host>:<port>
	if connection failed, returns first <backup> 
	that can be connected to <backup>:<port>

	if a host has multiple ip will return the name pointing
	to the reverse of ip that can connect

	can be used to switch to a backup server if 
	primary not available

	with -auto will give a server according to client ip
	to be used to load balance to different servers
	can replace haproxy which stays a spof in infrastructure
        
	Example:
	  # server=$(hasrv myhost 22 mybackup1 mybackup2)
	  # ssh $server echo I can connect to this server on port 22

	EOF
    exit 1
}

function ip2dec {
    typeset a b c d ip=$@
    IFS=. read -r a b c d <<<"$ip"
    echo  "$((a * 256 ** 3 + b * 256 ** 2 + c * 256 + d))"
}

function hosts2ips
{
    typeset hosts=$* host
    for host in $hosts;do
        host $host || echo "Warn: Cannot resolve $host" >&2
    done |awk '/has address/{if (!ip[$NF]) print $NF;ip[$NF]=1}'
}

function ip2host
{
    typeset ip=$1
    host $ip |awk '/name pointer/{sub("[.]$","");print $NF;exit}'
}

function connect_ip_port
{
    typeset ip=$1 port=$2 timeout=$3
    timeout $timeout ksh -c "echo > /dev/tcp/$ip/$port" >/dev/null 2>&1 && return 0
    echo "Warn: cannot connect to $(ip2host $ip) ($ip)" >&2
    return 1
}

# choose a host in list according to local ip
function auto_host
{
    typeset host=$(uname -n) ip ipnum n
    ip=$(host $host |awk '/has address/{print $NF;exit}')
    ipnum=$(ip2dec $ip)
    n=$(( $ipnum % $# + 1))
    eval echo '$'$n
}

function get_srv_up
{
    typeset host=$1 port=$2 backups=$3 backup='' timeout=3 ips ip
    [ "$host" = "-auto" ] && host=""
    ips=$(hosts2ips $host $backups)
    ips=$(echo $ips)
    [ ! "$host" ] && ips="$(auto_host $ips) $ips"
    ip=${ips%% *}
    connect_ip_port $ip $port 3 && ip2host $ip && return 0
    for ip in ${ips#* }
    do
        if connect_ip_port $ip $port $timeout;then
            backup=$(ip2host $ip)
            echo "Warn: Fallback to backup host: $backup" >&2
            echo "$backup"
            return 0
        fi
    done
    echo "Error: Cannot connect to any backup for $host on port $port" >&2 && return 1
    return 1
}

# Parameters
[ $# -lt 2 ] && usage
HOST=$1
PORT=$2
shift 2
BACKUPS="$*"

get_srv_up $HOST $PORT "$BACKUPS"
